<snippet>
	<content><![CDATA[
vector<int> LIS(vector<int> v) {
    int n = (int)v.size();
    set<pair<int, int>> s;
    vector<vector<pair<int, int>>> versions(n);
    vector<int>pos(n);
    for (int i = 0; i < n; i++) {
        pair<int, int> p = {v[i] + 1, 0};
        auto it = s.lower_bound(p);
        if (it == s.end()) {
            versions[(int)s.size()].pb({v[i], i});
            pos[i] = (int)s.size();
            s.insert({v[i], i});
        }
        else {          //change p = {v[i], 0}, else if(it->first > v[i]) for strictly increasing
            p = *it;
            s.erase(it);
            pos[i] = pos[p.second];
            s.insert({v[i], i});
            versions[pos[i]].pb({v[i], i});
        }
        // debug() << imie(s);
        // debug() << imie(versions);
    }
    vector<int> ans;
    int prev = n + 1, prev_val = INF;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = versions[i].size() - 1; j >= 0; j--) {
            if (versions[i][j].second < prev && versions[i][j].first <= prev_val) {
                prev_val = versions[i][j].first, prev = versions[i][j].second;
                ans.pb(prev_val);
                break;
            }
        }
        //debug() << imie(i)imie(prev_val)imie(prev);
    }
    reverse(all(ans));
    //debug() << imie(ans);
    // cout << s.size() << endl;
    // for (auto it : ans) {
    //     cout << it << ' ';
    // }
    // cout << endl;
    return ans;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>LIS</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
