<snippet>
	<content><![CDATA[
#include <bits/stdc++.h>
using namespace std;
using namespace chrono;
typedef int64_t ll;
typedef long double ld;
typedef unsigned long long ULL;
#define endl "\n"
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define pb push_back
void read(vector<int> &a) {for (auto &x : a)cin >> x;}
void read(vector<ll> &a) {for (auto &x : a)cin >> x;}
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c> {i, j}; }
sim > auto dud(c * x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifndef ONLINE_JUDGE
    ~debug() { cerr << endl; }
    eni( != ) cerr << boolalpha << i; ris;
}
eni( == ) ris << range(begin(i), end(i));
}
sim, class b dor(pair < b, c > d) {
    ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
    *this << "[";
    for (auto it = d.b; it != d.e; ++it)
        *this << ", " + 2 * (it == d.b) << *it;
    ris << "]";
}
#else
    sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

const int MOD = 1e9 + 7;
const int INF = (int)2e9 + 7;
const ll LINF = (ll)1e18;
const ld PI = 3.1415926535897932384626433832795;

const int N = 2e5 + 5;
int st[N], et[N], timer;
vector<int> adj[N];
bool vis[N];

void dfs(int s) {
    vis[s] = 1;
    st[s] = timer++;
    for (auto it : adj[s]) {
        if (!vis[it]) {
            dfs(it);
        }
    }
    et[s] = timer++;
}

template<class T> struct SegmentTree {
public : const T ID {}; vector<T> t; int n;
    T operation(T a, T b) {return a + b;}
    SegmentTree(const vector<T> &v) {
        n = (int)v.size();
        t.assign(2 * n, ID);
        for (int i = 0; i < n; ++i)t[n + i] = v[i];
        for (int i = n - 1; i > 0; --i) t[i] = operation(t[i << 1], t[i << 1 | 1]);
    }
    void modify(int p, T val) {
        for (t[p += n] = val; p > 1; p >>= 1) t[p >> 1] = operation(t[p], t[p ^ 1]);
    }
    T query(int l, int r) {
        if (l == r)return t[n + l];
        T ra = t[n + l], rb = t[n + r];
        l++, r--;
        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l & 1) ra = operation(ra, t[l++]);
            if (r & 1) rb = operation(t[--r], rb);
        }
        return operation(ra, rb);
    }
};

void solve() {
    int n;
    cin >> n;
    vector<int> a(n);
    read(a);
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    dfs(0);
    debug() << range(st, st + n);
    debug() << range(et, et + n);
    vector<int> v(2 * n);
    for (int i = 0; i < n; i++) {
        v[st[i]] = a[i];
    }
    for (int i = 0; i < n; i++) {
        v[et[i]] = a[i];
    }
    SegmentTree<int> tree(v);
    cout << tree.query(st[0], et[0]) / 2 << endl;
    tree.modify(st[5], 10);
    tree.modify(et[5], 10);
    cout << tree.query(st[1], et[1]) / 2;
}

int32_t main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int test_cases = 1;
    //cin >> test_cases;
    auto t1 = high_resolution_clock::now();
    for (int tt = 1; tt <= test_cases; tt++)
    {
        //cout << "Case #" << tt << ": ";
        solve();
    }
    auto t2 = high_resolution_clock::now();
    auto time = duration_cast<duration<double>>(t2 - t1);
    cerr << "Time elapsed = " << time.count() << endl;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>eularsegtree</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> 
</snippet>
